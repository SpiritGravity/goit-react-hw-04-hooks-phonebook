{"ast":null,"code":"var _jsxFileName = \"/Users/pro/Documents/React/goit-react-hw-04-hooks-phonebook/src/components/App.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport ContactForm from './ContactForm/contactForm';\nimport ContactList from './ContactList/contactList';\nimport Filter from './Filter/filter';\nimport useLocalStorage from './Hooks/useLocalStorage';\nimport { Container, Title, Subtitle } from './App.styled';\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst contactDefault = [{\n  id: 'id-1',\n  name: 'Rosie Simpson',\n  number: '459-12-56'\n}, {\n  id: 'id-2',\n  name: 'Hermione Kline',\n  number: '443-89-12'\n}, {\n  id: 'id-3',\n  name: 'Eden Clements',\n  number: '645-17-79'\n}, {\n  id: 'id-4',\n  name: 'Annie Copeland',\n  number: '227-91-26'\n}];\nexport default function App() {\n  _s();\n\n  const itemsContact = () => {\n    return JSON.parse(localStorage.getItem('contacts')) || contactDefault;\n  };\n\n  const [contacts, setContacts] = useState(itemsContact());\n  const [filter, setFilter] = useState('');\n  useEffect(() => {\n    window.localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]); // const componentDidMount() {\n  //   const contacts = localStorage.getItem('contacts');\n  //   const parsedContacts = JSON.parse(contacts);\n  //   if (parsedContacts) {\n  //     this.setState({contacts: parsedContacts});\n  //   }\n  // }\n  // const componentDidUpdate(_, prevState) {\n  //   if (this.state.contacts.length !== prevState.contacts.length) {\n  //     localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n  //   }\n  // }\n  // const addContacts = ({ name, number }) => {\n  //   const normalizedName = name.toLowerCase();\n  //   const isName = this.state.contacts.find(\n  //     contact => contact.name.toLowerCase() === normalizedName\n  //   );\n  //   if (isName) {\n  //     return alert(`${name} is already in contacts.`);\n  //   }\n  //   const contact = {\n  //     id: nanoid(6),\n  //     name,\n  //     number,\n  //   };\n  //   this.setState(({ contacts }) => ({\n  //     contacts: [...contacts, contact],\n  //   }));\n  // };\n  // const deleteContact = contactId => {\n  //   this.setState(prevState => ({\n  //     contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n  //   }));\n  // };\n  // const changeFilter = e => {\n  //   this.setState({ filter: e.currentTarget.value });\n  // };\n  // const getContact = () => {\n  //   const { contacts, filter } = this.state;\n  //   const normalizedFilter = filter.toLowerCase();\n  //   return contacts.filter(contact =>\n  //     contact.name.toLowerCase().includes(normalizedFilter)\n  //   );\n  // };\n  // // const { filter } = state;\n  // const visibleContact = getContact();\n\n  const addContacts = _ref => {\n    let {\n      name,\n      number\n    } = _ref;\n    const contact = {\n      id: nanoid(),\n      name,\n      number\n    };\n\n    if (contacts.some(contact => contact.name === name)) {\n      return alert(`${contact.name} is already in contacts`);\n    }\n\n    setContacts([contact, ...contacts]);\n  };\n\n  const changeFilter = e => {\n    setFilter(e.currentTarget.value);\n  };\n\n  const getVisibleContacts = () => {\n    // const { contacts, filter } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\n  };\n\n  const deleteContact = contactId => {\n    setContacts(contacts.filter(contact => contact.id !== contactId));\n    setFilter('');\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      children: \"Phonebook\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 2\n    }, this), /*#__PURE__*/_jsxDEV(ContactForm, {\n      onSubmit: addContacts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 2\n    }, this), /*#__PURE__*/_jsxDEV(Subtitle, {\n      children: \"Contacts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 2\n    }, this), /*#__PURE__*/_jsxDEV(Filter, {\n      value: filter,\n      onChange: changeFilter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 2\n    }, this), /*#__PURE__*/_jsxDEV(ContactList, {\n      contacts: getVisibleContacts(),\n      onDeleteContact: deleteContact\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 2\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 2\n  }, this);\n}\n\n_s(App, \"bDuAx+R0Nf0LogbERA3yh8X5nqA=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/pro/Documents/React/goit-react-hw-04-hooks-phonebook/src/components/App.jsx"],"names":["useState","useEffect","ContactForm","ContactList","Filter","useLocalStorage","Container","Title","Subtitle","nanoid","contactDefault","id","name","number","App","itemsContact","JSON","parse","localStorage","getItem","contacts","setContacts","filter","setFilter","window","setItem","stringify","addContacts","contact","some","alert","changeFilter","e","currentTarget","value","getVisibleContacts","normalizedFilter","toLowerCase","includes","deleteContact","contactId"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,eAAP,MAA4B,yBAA5B;AACA,SAAQC,SAAR,EAAmBC,KAAnB,EAA0BC,QAA1B,QAAyC,cAAzC;AACA,SAASC,MAAT,QAAuB,QAAvB;;AAEA,MAAMC,cAAc,GAAG,CACrB;AAACC,EAAAA,EAAE,EAAE,MAAL;AAAaC,EAAAA,IAAI,EAAE,eAAnB;AAAoCC,EAAAA,MAAM,EAAE;AAA5C,CADqB,EAErB;AAACF,EAAAA,EAAE,EAAE,MAAL;AAAaC,EAAAA,IAAI,EAAE,gBAAnB;AAAqCC,EAAAA,MAAM,EAAE;AAA7C,CAFqB,EAGrB;AAACF,EAAAA,EAAE,EAAE,MAAL;AAAaC,EAAAA,IAAI,EAAE,eAAnB;AAAoCC,EAAAA,MAAM,EAAE;AAA5C,CAHqB,EAIrB;AAACF,EAAAA,EAAE,EAAE,MAAL;AAAaC,EAAAA,IAAI,EAAE,gBAAnB;AAAqCC,EAAAA,MAAM,EAAE;AAA7C,CAJqB,CAAvB;AAOA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC5B,QAAMC,YAAY,GAAG,MAAM;AACzB,WAAOC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,KAAgDT,cAAvD;AACD,GAFD;;AAGA,QAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BrB,QAAQ,CAACe,YAAY,EAAb,CAAxC;AACA,QAAM,CAACO,MAAD,EAASC,SAAT,IAAsBvB,QAAQ,CAAC,EAAD,CAApC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACduB,IAAAA,MAAM,CAACN,YAAP,CAAoBO,OAApB,CAA4B,UAA5B,EAAwCT,IAAI,CAACU,SAAL,CAAeN,QAAf,CAAxC;AACD,GAFQ,EAEN,CAACA,QAAD,CAFM,CAAT,CAN4B,CAW5B;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;;AAKA,QAAMO,WAAW,GAAG,QAAsB;AAAA,QAArB;AAAEf,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAqB;AACxC,UAAMe,OAAO,GAAG;AACdjB,MAAAA,EAAE,EAAEF,MAAM,EADI;AAEdG,MAAAA,IAFc;AAGdC,MAAAA;AAHc,KAAhB;;AAKA,QAAIO,QAAQ,CAACS,IAAT,CAAcD,OAAO,IAAIA,OAAO,CAAChB,IAAR,KAAiBA,IAA1C,CAAJ,EAAqD;AACnD,aAAOkB,KAAK,CAAE,GAAEF,OAAO,CAAChB,IAAK,yBAAjB,CAAZ;AACD;;AACDS,IAAAA,WAAW,CAAC,CAACO,OAAD,EAAU,GAAGR,QAAb,CAAD,CAAX;AACD,GAVD;;AAYA,QAAMW,YAAY,GAAGC,CAAC,IAAI;AACxBT,IAAAA,SAAS,CAACS,CAAC,CAACC,aAAF,CAAgBC,KAAjB,CAAT;AACD,GAFD;;AAIA,QAAMC,kBAAkB,GAAG,MAAM;AAC/B;AACA,UAAMC,gBAAgB,GAAGd,MAAM,CAACe,WAAP,EAAzB;AACA,WAAOjB,QAAQ,CAACE,MAAT,CAAgBM,OAAO,IAC5BA,OAAO,CAAChB,IAAR,CAAayB,WAAb,GAA2BC,QAA3B,CAAoCF,gBAApC,CADK,CAAP;AAGD,GAND;;AAQA,QAAMG,aAAa,GAAGC,SAAS,IAAI;AACjCnB,IAAAA,WAAW,CAACD,QAAQ,CAACE,MAAT,CAAgBM,OAAO,IAAIA,OAAO,CAACjB,EAAR,KAAe6B,SAA1C,CAAD,CAAX;AACAjB,IAAAA,SAAS,CAAC,EAAD,CAAT;AACD,GAHD;;AAIA,sBACD,QAAC,SAAD;AAAA,4BACA,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,eAEA,QAAC,WAAD;AACK,MAAA,QAAQ,EAAEI;AADf;AAAA;AAAA;AAAA;AAAA,YAFA,eAKA,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALA,eAMA,QAAC,MAAD;AACK,MAAA,KAAK,EAAEL,MADZ;AAEK,MAAA,QAAQ,EAAES;AAFf;AAAA;AAAA;AAAA;AAAA,YANA,eAUA,QAAC,WAAD;AACK,MAAA,QAAQ,EAAEI,kBAAkB,EADjC;AAEK,MAAA,eAAe,EAAEI;AAFtB;AAAA;AAAA;AAAA;AAAA,YAVA;AAAA;AAAA;AAAA;AAAA;AAAA,UADC;AAkBD;;GAxHuBzB,G;;KAAAA,G","sourcesContent":["import { useState, useEffect } from 'react';\nimport ContactForm from './ContactForm/contactForm';\nimport ContactList from './ContactList/contactList';\nimport Filter from './Filter/filter';\nimport useLocalStorage from './Hooks/useLocalStorage';\nimport {Container, Title, Subtitle} from './App.styled';\nimport { nanoid } from 'nanoid';\n\nconst contactDefault = [\n  {id: 'id-1', name: 'Rosie Simpson', number: '459-12-56'},\n  {id: 'id-2', name: 'Hermione Kline', number: '443-89-12'},\n  {id: 'id-3', name: 'Eden Clements', number: '645-17-79'},\n  {id: 'id-4', name: 'Annie Copeland', number: '227-91-26'},\n];\n\nexport default function App() {\n  const itemsContact = () => {\n    return JSON.parse(localStorage.getItem('contacts')) || contactDefault;\n  };\n  const [contacts, setContacts] = useState(itemsContact());\n  const [filter, setFilter] = useState('');\n  useEffect(() => {\n    window.localStorage.setItem('contacts', JSON.stringify(contacts));\n  }, [contacts]);\n\n\n  // const componentDidMount() {\n  //   const contacts = localStorage.getItem('contacts');\n  //   const parsedContacts = JSON.parse(contacts);\n\n  //   if (parsedContacts) {\n  //     this.setState({contacts: parsedContacts});\n  //   }\n  // }\n\n  // const componentDidUpdate(_, prevState) {\n  //   if (this.state.contacts.length !== prevState.contacts.length) {\n  //     localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n  //   }\n  // }\n\n  // const addContacts = ({ name, number }) => {\n  //   const normalizedName = name.toLowerCase();\n\n  //   const isName = this.state.contacts.find(\n  //     contact => contact.name.toLowerCase() === normalizedName\n  //   );\n\n  //   if (isName) {\n  //     return alert(`${name} is already in contacts.`);\n  //   }\n\n  //   const contact = {\n  //     id: nanoid(6),\n  //     name,\n  //     number,\n  //   };\n\n  //   this.setState(({ contacts }) => ({\n  //     contacts: [...contacts, contact],\n  //   }));\n  // };\n  \n  // const deleteContact = contactId => {\n  //   this.setState(prevState => ({\n  //     contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n  //   }));\n  // };\n\n  // const changeFilter = e => {\n  //   this.setState({ filter: e.currentTarget.value });\n  // };\n\n  // const getContact = () => {\n  //   const { contacts, filter } = this.state;\n  //   const normalizedFilter = filter.toLowerCase();\n\n  //   return contacts.filter(contact =>\n  //     contact.name.toLowerCase().includes(normalizedFilter)\n  //   );\n  // };\n\n  \n  // // const { filter } = state;\n  // const visibleContact = getContact();\n\n\n\n\n  const addContacts = ({ name, number }) => {\n    const contact = {\n      id: nanoid(),\n      name,\n      number,\n    };\n    if (contacts.some(contact => contact.name === name)) {\n      return alert(`${contact.name} is already in contacts`);\n    }\n    setContacts([contact, ...contacts]);\n  };\n\n  const changeFilter = e => {\n    setFilter(e.currentTarget.value);\n  };\n\n  const getVisibleContacts = () => {\n    // const { contacts, filter } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  const deleteContact = contactId => {\n    setContacts(contacts.filter(contact => contact.id !== contactId));\n    setFilter('');\n  };\n  return (\n <Container>\n <Title>Phonebook</Title>\n <ContactForm \n      onSubmit={addContacts} \n      />\n <Subtitle>Contacts</Subtitle>\n <Filter\n      value={filter} \n      onChange={changeFilter} \n      />\n <ContactList\n      contacts={getVisibleContacts()}\n      onDeleteContact={deleteContact}\n        />\n</Container>\n  )\n  \n}\n\n"]},"metadata":{},"sourceType":"module"}